package main

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"webapp-cve-processor/internal/function"
	"webapp-cve-processor/internal/helper"
	"webapp-cve-processor/pkg/database"

	"github.com/joho/godotenv"
)

func main() {
	godotenv.Load()

	database.InitPostgres()

	fmt.Println("Downloading Zip...")
	err := helper.DownloadFile("https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip", "./cve-list/cve.zip")
	if err != nil {
		println(err)
	}

	fmt.Println("Unzipping...")
	err = helper.Unzip("./cve-list/cve.zip", "./cve-list")
	if err != nil {
		println(err)
	}

	cveMap := make(map[int][]string)
	helper.WalkAndProcessJSON("./cve-list", cveMap)

	fmt.Println("Inserting records...")
	function.ProcessCveMap(cveMap)
	fmt.Println("Done...")

	fmt.Println("Done...")

	sigc := make(chan os.Signal, 1)
	signal.Notify(sigc,
		syscall.SIGHUP,
		syscall.SIGINT,
		syscall.SIGTERM,
		syscall.SIGQUIT)

	go func() {
		<-sigc

		fmt.Println("Disconnecting Database...")

		pgDB, err := database.DataSource.DB()
		if err != nil {
			fmt.Println("DB Object not found")
			os.Exit(0)
		}

		if err = pgDB.Ping(); err != nil {
			fmt.Println("DB Connection was not established")
			os.Exit(0)
		}

		if err = pgDB.Close(); err != nil {
			fmt.Println("DB Connection was not closed")
			os.Exit(0)
		}

		fmt.Println("Cleanup Completed!")
		os.Exit(0)
	}()

	wait := make(chan int, 1)
	<-wait
}
