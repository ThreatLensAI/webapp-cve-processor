package main

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/function"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/helper"
	"github.com/csye7125-su24-team06/webapp-cve-processor/pkg/database"

	"github.com/joho/godotenv"
)

func main() {
	sigc := make(chan os.Signal, 1)
	signal.Notify(sigc,
		syscall.SIGHUP,
		syscall.SIGINT,
		syscall.SIGTERM,
		syscall.SIGQUIT)

	go func() {
		<-sigc

		fmt.Println("Disconnecting Database...")

		pgDB, err := database.DataSource.DB()
		if err != nil {
			fmt.Println("DB Object not found")
			os.Exit(0)
		}

		if err = pgDB.Ping(); err != nil {
			fmt.Println("DB Connection was not established")
			os.Exit(0)
		}

		if err = pgDB.Close(); err != nil {
			fmt.Println("DB Connection was not closed")
			os.Exit(0)
		}

		fmt.Println("Cleanup Completed!")
		os.Exit(0)
	}()

	godotenv.Load()

	database.InitPostgres()

	fmt.Println("Downloading Zip...")

	downloadDir := os.Getenv("DOWNLOAD_DIR")
	if len(downloadDir) == 0 {
		downloadDir = "/tmp/cve-list"
	}

	filePath := fmt.Sprintf("%v/cve.zip", downloadDir)

	if err := os.MkdirAll(downloadDir, 0755); err != nil {
		panic(fmt.Sprintf("Directory creation Failure : %v", err))
	}

	url := os.Getenv("CVE_LIST_URL")
	if len(url) == 0 {
		url = "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip"
	}

	if err := helper.DownloadFile(url, filePath); err != nil {
		panic(fmt.Sprintf("Cve list download failed : %v", err))
	}

	fmt.Println("Unzipping...")

	if err := helper.Unzip(filePath, downloadDir); err != nil {
		panic(fmt.Sprintf("Cve list unzipping failed : %v", err))
	}

	cveMap := make(map[int][]string)
	helper.WalkAndProcessJSON(downloadDir, cveMap)

	fmt.Println("Inserting records...")
	function.ProcessCveMap(cveMap, helper.GetSha1(filePath))
	fmt.Println("Done...")
}
