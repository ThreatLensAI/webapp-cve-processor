package function

import (
	"fmt"
	"sort"
	"time"
	"webapp-cve-processor/include/helper"
	"webapp-cve-processor/include/models"
	"webapp-cve-processor/include/repository"
)

func ProcessCveMap(cveMap map[int][]string) { // TODO: PROGRESS TRACKING LOGIC
	var years []int
	for k := range cveMap {
		sort.Strings(cveMap[k])
		years = append(years, k)
	}

	sort.Ints(years)

	for k := range len(years) {
		year := years[k]
		sort.Strings(cveMap[year])
		for i := range cveMap[year] {
			data, err := helper.ProcessJSONFile(cveMap[year][i])
			if err != nil {
				panic(fmt.Sprintf("Unmarshalling failure %v", err))
			}

			dateUpdated, err := time.Parse("2006-01-02T15:04:05", data.CveMetaData.DateUpdated)
			if err != nil {
				panic(fmt.Sprintf("Time parse error %v", err))
			}

			dateUpdated = dateUpdated.UTC()

			cve := models.Cve{
				Cve_id:      data.CveMetaData.Cve_id,
				DateUpdated: dateUpdated,
				Version:     1,
				Data:        data.RawData,
			}

			existingCveDoc, txGorm := repository.FindCves(cve.Cve_id)

			if txGorm.RowsAffected != 0 {
				if cve.DateUpdated.After(existingCveDoc.DateUpdated) {
					cve.Version = existingCveDoc.Version + 1
					repository.InsertCve(&cve)
				}
			} else {
				repository.InsertCve(&cve)
			}
		}
	}
}
