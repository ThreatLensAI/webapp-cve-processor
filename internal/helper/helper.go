package helper

import (
	"archive/zip"
	"crypto/sha1"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

func Unzip(src, dest string) error {
	r, err := zip.OpenReader(src)
	if err != nil {
		return err
	}
	defer r.Close()

	for _, f := range r.File {
		filePath := filepath.Join(dest, f.Name)

		if f.FileInfo().IsDir() {
			// If the current item is a directory, create it.
			if err := os.MkdirAll(filePath, os.ModePerm); err != nil {
				return err
			}
			continue
		}

		// Ensure the parent directory exists for the file.
		if err := os.MkdirAll(filepath.Dir(filePath), os.ModePerm); err != nil {
			return err
		}

		// Create the file.
		dstFile, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
		if err != nil {
			return err
		}

		// Open the zipped file.
		srcFile, err := f.Open()
		if err != nil {
			return err
		}

		// Copy the file content to the destination file.
		if _, err := io.Copy(dstFile, srcFile); err != nil {
			return err
		}

		dstFile.Close()
		srcFile.Close()
	}

	return nil
}

func DownloadFile(url string, filepath string) error {
	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return err
	}

	return nil
}

func WalkAndProcessJSON(root string, mapByYear map[int][]string) error {
	return filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if filepath.Ext(path) == ".json" && info.Name() != "delta.json" && info.Name() != "deltaLog.json" {
			year, _ := strconv.Atoi(filepath.Base(filepath.Dir(filepath.Dir(path))))
			mapByYear[year] = append(mapByYear[year], fmt.Sprintf("%v", path))
		}

		return nil
	})
}

type CveMetadata struct {
	Cve_id        string `json:"cveId"`
	DateUpdated   string `json:"dateUpdated"`
	DatePublished string `json:"datePublished"`
}

type Data struct {
	CveMetaData CveMetadata     `json:"cveMetadata"`
	RawData     json.RawMessage `json:"others"`
}

func ProcessJSONFile(path string) (*Data, error) {
	content, err := os.ReadFile(path)
	if err != nil {
		return nil, err
	}

	var data Data
	if err := json.Unmarshal(content, &data); err != nil {
		return nil, err
	}

	data.RawData = json.RawMessage(content)

	return &data, nil
}

func GetSha1(filePath string) string {
	f, err := os.Open(filePath)

	if err != nil {
		panic(fmt.Sprintf("Cant open file : %v", err))
	}

	defer f.Close()

	h := sha1.New()
	if _, err := io.Copy(h, f); err != nil {
		panic(fmt.Sprintf("Cant copy sha1 object : %v", err))
	}

	return hex.EncodeToString(h.Sum(nil))
}

func GetIndexOf(slice interface{}, elem interface{}) int {
	switch s := slice.(type) {
	case []int:
		if e, ok := elem.(int); ok {
			for i, v := range s {
				if v == e {
					return i
				}
			}
		}
	case []string:
		if e, ok := elem.(string); ok {
			for i, v := range s {
				if strings.Contains(v, e) {
					return i
				}
			}
		}
	}

	return -1
}
